

# 예제 데이터 정의
customers = {
    "id": 1,
    "location": (37.5665, 126.9780),  # 서울 시청
    "request_time": "2025-01-18 14:00"
}

evaluators = [
    {
        "id": 1,
        "location": (37.5651, 126.9895),  # 명동
        "available_times": ["2025-01-18 13:00", "2025-01-18 15:00"],
        "max_requests": 5,
        "current_requests": 3
    },
    {
        "id": 2,
        "location": (37.5510, 126.9882),  # 남산
        "available_times": ["2025-01-18 12:00", "2025-01-18 16:00"],
        "max_requests": 3,
        "current_requests": 3
    },
    {
        "id": 3,
        "location": (37.5780, 126.9768),  # 경복궁
        "available_times": ["2025-01-18 14:00", "2025-01-18 18:00"],
        "max_requests": 4,
        "current_requests": 1
    },
]

# 거리 계산 함수
def calculate_distance(loc1, loc2):
    return geodesic(loc1, loc2).kilometers

# 평가사 매칭 함수
def match_evaluator(customer, evaluators):
    possible_evaluators = []

    for evaluator in evaluators:
        # 1. 시간 필터
        if customer["request_time"] not in evaluator["available_times"]:
            continue

        # 2. 작업량 필터
        if evaluator["current_requests"] >= evaluator["max_requests"]:
            continue

        # 3. 거리 계산
        distance = calculate_distance(customer["location"], evaluator["location"])
        possible_evaluators.append((evaluator["id"], distance))
    
    # 4. 가장 가까운 평가사 선택
    if possible_evaluators:
        best_evaluator = min(possible_evaluators, key=lambda x: x[1])  # 거리 기준으로 최소값 선택
        return best_evaluator
    else:
        return None

# 실행
result = match_evaluator(customers, evaluators)
if result:
    print(f"매칭된 평가사: {result[0]}, 거리: {result[1]:.2f}km")
else:
    print("매칭 가능한 평가사가 없습니다.")
